{"version":3,"sources":["Algorithms/Algorithms.js","Project/AlgoProject.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","AlgoProject","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","className","class","onClick","mergeSort","map","value","idx","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAAO,SAASA,EAAuBC,GACnC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OAMJ,SAASC,EAAgBC,EAAWC,EAAUC,EAAQL,EAAgBF,GAClE,GAAIM,IAAaC,EAAQ,OACzB,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAKtE,SAAiBK,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GACrE,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG1BP,EAAWc,KAAK,CAACF,EAAGC,IAGpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAGpCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAGxC,KAAOD,GAAKJ,GAGRR,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAEpC,KAAOC,GAAKN,GAGRP,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KAjDpCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GAZhEI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,ECEX,IAUqBgB,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTnB,MAAO,IAJI,E,gEASfoB,KAAKC,e,mCAML,IADA,IA8EuBC,EAAKC,EA9EtBvB,EAAQ,GACLa,EAAI,EAAGA,EAvBK,IAuBqBA,IACtCb,EAAMe,MA4EaO,EA5Ec,EA4ETC,EA5EY,IA6ErCb,KAAKC,MAAMD,KAAKc,UAAYD,EAAMD,EAAM,GAAKA,KA3EhDF,KAAKK,SAAS,CAAEzB,Y,kCAMhB,IADA,IAAMC,EAAaF,EAAuBqB,KAAKD,MAAMnB,OAD7C,WAECa,GACL,IAAMa,EAAYC,SAASC,uBAAuB,aAKlD,GAFsBf,EAAI,IAAM,EAEb,mBACgBZ,EAAWY,GAD3B,GACRgB,EADQ,KACGC,EADH,KAETC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAQrB,EAAI,IAAM,EApChB,UAHF,UAwCNsB,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAhDvB,EAiDRrB,QAEHsB,YAAW,WAAM,kBACkBlC,EAAWY,GAD7B,GACNgB,EADM,KACKQ,EADL,KAEOX,EAAUG,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QAtDO,EAuDRxB,IApBFA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,+BA8BH,IAAD,OACGb,EAAUoB,KAAKD,MAAfnB,MAER,OAII,yBAAKuC,UAAU,mBACX,uEACA,yBAAKC,MAAM,aAKP,4BAAQC,QAAS,kBAAM,EAAKpB,eAA5B,sBACA,4BAAQoB,QAAS,kBAAM,EAAKC,cAA5B,eAIH1C,EAAM2C,KAAI,SAACC,EAAOC,GAAR,OACP,yBACIN,UAAU,YACVO,IAAKD,EACLb,MAAO,CACHI,gBAnFN,UAoFME,OAAO,GAAD,OAAKM,EAAL,iB,GAhFOG,IAAMC,W,MCFhCC,MATf,WACI,OAEE,yBAAKV,UAAU,OAChB,kBAAC,EAAD,QCEeW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0f7d9d7a.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n// This is a helper method that is called to do the seperation with recursion, later the do merge function that we created below will be called \n// below after the two merge sort helper methods are called, the merge sort helper is basically sorting each of the two sides of the array.\n// The Merge sort helper takes in a few parameters; the actual array being sorted, the start and end indexes of the array, the auxillary array\n// which will be used later when doing the actual merge and then animations to connect the algorithm with the animation functionality of react\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);//We find the middle of the array so that we can split it into two sections below\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);//this would beging sorting the left portion, using the middle index above, basically creating two 'arrays'\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);//this would do the same but with right portion\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);//here we actually begin the merging once we've sorted the values\n    //we keep recursively calling this until we hit the above if statement and there is only one value within the 'array'\n}\n//This is our actual merging method that takes the same parameters as above\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}\n\n","import React from 'react';\r\nimport './AlgoProject.css';\r\nimport { getMergeSortAnimations } from '../Algorithms/Algorithms.js';\r\n\r\n\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 5;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = '#49BC85';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = '#DA5F44';\r\nexport default class AlgoProject extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n    // when the app loads for the first time we call the reset array method\r\n    componentDidMount() {\r\n        this.resetArray(); //This is the method we call when we click the create array button \r\n    }\r\n    // this method creates an array, interates in a for loop and generates(pushes) a random value between 10 and 1000\r\n    // then resets the state to have this new array\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 500)); //starting at 5 to make sure that you can actually see a low value in react\r\n        }\r\n        this.setState({ array });//resets the state to have this array\r\n    }\r\n\r\n    \r\n    mergeSort() {      \r\n        const animations = getMergeSortAnimations(this.state.array);// Get animations by calling our merge sort method on our array\r\n        for (let i = 0; i < animations.length; i++) {//Iterate through all of the animations\r\n            const arrayBars = document.getElementsByClassName('array-bar');//grab the array bars that are currently in the dom, the dom is the \r\n            // document object model, which is the programming interface for HTML and XML documents, it provides a way for javascript to interact\r\n            // with every single node in an HTML document to manipulate it. It allows programming languages to connect to the page.\r\n            const isColorChange = i % 3 !== 2;//Check to see if we're dealing with a color change, it happens for the first two values of every 3 animations, if the reminder is 2 then we \r\n            //  we know we;re dealing with the overriding animation or not \r\n            if (isColorChange) {//here we're changing the color of the comparison bars that are being compared during the sorting algorithm\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR; \r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {//here we're giving the bar that we're overriding the new height, this is where the overriding is occuring\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    //quickSort() {\r\n\r\n    //}\r\n    // \r\n    render() {\r\n        const { array } = this.state;\r\n\r\n        return (\r\n            //Here we organize was gets displayed to the browser, first we display the header then below that we'll show the buttons\r\n            //and then below that we'll place the array-bar function that we created. Their order within this array container determines\r\n            //their positon within the array.\r\n            <div className=\"array-container\">\r\n                <h2> Gregor Zeller's Cool Sorting Project! </h2>\r\n                <div class=\"btn-group\">\r\n                    {/* \r\n                     * Two buttons below with on click event handler that calls my two functions, reset array and merge sorts, when they are \r\n                     * clicked within the browser\r\n                     */}\r\n                    <button onClick={() => this.resetArray()}>Generate New Array</button> \r\n                    <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n\r\n                </div>\r\n                \r\n                {array.map((value, idx) => (\r\n                    <div\r\n                        className=\"array-bar\"\r\n                        key={idx}\r\n                        style={{\r\n                            backgroundColor: PRIMARY_COLOR, // Background color is a constant that can be easily changed above\r\n                            height: `${value}px`, //Literally made the height of the bars the value of the array that was passed in\r\n                        }}></div>\r\n                ))}\r\n                \r\n               \r\n                    \r\n        \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//method that I used about on how to randomize a number in javascript\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport AlgoProject from './Project/AlgoProject';\nimport './App.css';\n// Algo project component is imported here and then rendered within the app below\n// \n\nfunction App() {\n    return (\n      \n      <div className=\"App\">\n     <AlgoProject></AlgoProject>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}